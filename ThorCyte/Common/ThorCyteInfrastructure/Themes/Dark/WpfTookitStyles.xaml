<ResourceDictionary xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                    xmlns:d="http://schemas.microsoft.com/expression/blend/2008" 
                    xmlns:mc="http://schemas.openxmlformats.org/markup-compatibility/2006"
                    xmlns:darkBlendTheme="clr-namespace:DarkBlendTheme"
                    xmlns:local="clr-namespace:Xceed.Wpf.Toolkit;assembly=Xceed.Wpf.Toolkit"
                    xmlns:prim="clr-namespace:Xceed.Wpf.Toolkit.Primitives;assembly=Xceed.Wpf.Toolkit"
                    xmlns:themes="clr-namespace:Xceed.Wpf.Toolkit.Themes;assembly=Xceed.Wpf.Toolkit"
                    xmlns:xctk="http://schemas.xceed.com/wpf/xaml/toolkit"
                    xmlns:themes1="clr-namespace:ThorCyte.Infrastructure.Themes"
                    mc:Ignorable="d">
    <themes1:InverseBoolConverter x:Key="InverseBoolConverter"/>
    <themes1:ColorToSolidColorBrushConverter x:Key="ColorToSolidColorBrushConverter"/>
    <BooleanToVisibilityConverter x:Key="BooleanToVisibilityConverter" />

    <SolidColorBrush x:Key="PanelBackgroundBrush" Color="{StaticResource LightBackgroundColor}"/>
    <SolidColorBrush x:Key="PopupDarkBorderBrush" Color="{StaticResource DarkBackgroundColor}"/>

    <DataTemplate x:Key="DefaultWatermarkTemplate">
        <ContentControl Content="{Binding}" Foreground="Gray" Focusable="False" Margin="0,0,3,0" />
    </DataTemplate>

    <Style x:Key="LocRepeatButtonUpStyle" TargetType="{x:Type RepeatButton}">
        <Setter Property="OverridesDefaultStyle" Value="true"/>
        <Setter Property="Focusable" Value="false"/>
        <Setter Property="IsTabStop" Value="false"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Grid Background="Transparent">
                        <Path x:Name="TrianglePath" Data="{StaticResource RepeatButton}" 
									Fill="{StaticResource VerticalScrollBarThumb}" Height="Auto" Margin="3,0,3,1" Stretch="Fill" Width="Auto"/>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Fill" TargetName="TrianglePath" Value="{StaticResource ScrollBarHotThumb}"/>
                        </Trigger>
                        <Trigger Property="IsPressed"  Value="True">
                            <Setter Property="Fill" TargetName="TrianglePath" Value="{StaticResource ScrollBarSelectedThumb}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="LocRepeatButtonDownStyle" TargetType="{x:Type RepeatButton}" BasedOn="{StaticResource LocRepeatButtonUpStyle}">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type RepeatButton}">
                    <Grid Background="Transparent">
                        <Path x:Name="BottomTrianglePath" Data="{StaticResource RepeatButton}" 
									Fill="{StaticResource VerticalScrollBarThumb}" Height="Auto" Margin="3,1,3,0" Stretch="Fill" Width="Auto"
									RenderTransformOrigin="0.5,0.5">
                            <Path.RenderTransform>
                                <TransformGroup>
                                    <ScaleTransform ScaleY="-1" ScaleX="1"/>
                                    <SkewTransform AngleY="0" AngleX="0"/>
                                    <RotateTransform Angle="0"/>
                                    <TranslateTransform/>
                                </TransformGroup>
                            </Path.RenderTransform>
                        </Path>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="True">
                            <Setter Property="Fill" TargetName="BottomTrianglePath" Value="{StaticResource ScrollBarHotThumb}"/>
                        </Trigger>
                        <Trigger Property="IsPressed"  Value="True">
                            <Setter Property="Fill" TargetName="BottomTrianglePath" Value="{StaticResource ScrollBarSelectedThumb}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>
    
    <Style TargetType="{x:Type local:ButtonSpinner}">
        <Setter Property="Background" Value="{StaticResource WindowBackgroundBrush}" />
        <Setter Property="BorderBrush" Value="{StaticResource TabControlNormalBorderBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="Focusable" Value="False" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="IsTabStop" Value="True" />
        <Setter Property="Padding" Value="1" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:ButtonSpinner}">
                    <Border x:Name="Border" SnapsToDevicePixels="True" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" >
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <ContentPresenter Focusable="False" Margin="{TemplateBinding Padding}" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" />

                            <Grid Grid.Column="1" Visibility="{TemplateBinding ShowButtonSpinner, Converter={StaticResource bool2VisibilityConverter}}" Width="{DynamicResource {x:Static SystemParameters.VerticalScrollBarWidthKey}}">
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="*" />
                                    <RowDefinition Height="*" />
                                </Grid.RowDefinitions>

                                <RepeatButton x:Name="PART_IncreaseButton"
                                   Style="{StaticResource LocRepeatButtonUpStyle}"
                                   IsTabStop="{TemplateBinding IsTabStop}"  />

                                <RepeatButton x:Name="PART_DecreaseButton"
                                   Grid.Row="1"
                                   Style="{StaticResource LocRepeatButtonDownStyle}"
                                   IsTabStop="{TemplateBinding IsTabStop}"/>

                            </Grid>
                        </Grid>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Background" Value="{DynamicResource {x:Static themes:ResourceKeys.ControlDisabledBackgroundKey}}" />
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="NumericUpDown" TargetType="{x:Type prim:InputBase}">
        <Setter Property="Background" Value="{StaticResource WindowBackgroundBrush}" />
        <Setter Property="BorderBrush" Value="{StaticResource TabControlNormalBorderBrush}" />
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="FontFamily" Value="Calibri light"/>
        <Setter Property="Foreground" Value="{StaticResource ForegroundBrush}"/>
        <Setter Property="HorizontalContentAlignment" Value="Right" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="TextAlignment" Value="Right" />
        <Setter Property="WatermarkTemplate" Value="{StaticResource DefaultWatermarkTemplate}" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Control">
                    <local:ButtonSpinner x:Name="PART_Spinner"
                                    IsTabStop="False"
                                    Background="{TemplateBinding Background}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    AllowSpin="{Binding AllowSpin, RelativeSource={RelativeSource TemplatedParent}}"
                                    ShowButtonSpinner="{Binding ShowButtonSpinner, RelativeSource={RelativeSource TemplatedParent}}">
                        <local:WatermarkTextBox x:Name="PART_TextBox"
                                          BorderThickness="0"
                                          Background="{TemplateBinding Background}"
                                          ContextMenu="{TemplateBinding ContextMenu}"
                                          FontFamily="{TemplateBinding FontFamily}" 
                                          FontSize="{TemplateBinding FontSize}" 
                                          FontStretch="{TemplateBinding FontStretch}"
                                          FontStyle="{TemplateBinding FontStyle}" 
                                          FontWeight="{TemplateBinding FontWeight}" 
                                          Foreground="{TemplateBinding Foreground}" 
                                          HorizontalContentAlignment="{TemplateBinding HorizontalContentAlignment}"
                                          IsReadOnly="{Binding IsReadOnly, RelativeSource={RelativeSource TemplatedParent}}"
                                          MinWidth="20"
                                          AcceptsReturn="False"
                                          Padding="{TemplateBinding Padding}"
                                          SelectAllOnGotFocus="{Binding SelectAllOnGotFocus, RelativeSource={RelativeSource TemplatedParent}}"
                                          TextAlignment="{Binding TextAlignment, RelativeSource={RelativeSource TemplatedParent}}"
                                          TextWrapping="NoWrap" 
                                          TabIndex="{TemplateBinding TabIndex}"
                                          VerticalContentAlignment="{TemplateBinding VerticalContentAlignment}"
                                          Watermark="{Binding Watermark, RelativeSource={RelativeSource TemplatedParent}}"
                                          WatermarkTemplate="{Binding WatermarkTemplate, RelativeSource={RelativeSource TemplatedParent}}" />
                    </local:ButtonSpinner>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsEnabled" Value="False">
                            <Setter Property="Foreground" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" />
                        </Trigger>
                        <Trigger Property="IsFocused" Value="True">
                            <Setter TargetName="PART_TextBox" Property="FocusManager.FocusedElement" Value="{Binding ElementName=PART_TextBox}" />
                        </Trigger>
                        <!--<Trigger Property="IsMouseOver" Value="True">
                            <Setter TargetName="PART_Spinner" Property="Background" Value="{StaticResource MouseOverButtonBackground}"/>
                            <Setter TargetName="PART_Spinner" Property="Foreground" Value="{StaticResource MouseOverButtonForeground}"/>
                        </Trigger>-->
                        
                        
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <DrawingBrush x:Key="CheckerBrush" Viewport="0,0,10,10" ViewportUnits="Absolute" TileMode="Tile">
        <DrawingBrush.Drawing>
            <DrawingGroup>
                <GeometryDrawing Brush="#FFFFFFFF">
                    <GeometryDrawing.Geometry>
                        <RectangleGeometry Rect="0,0 100,100" />
                    </GeometryDrawing.Geometry>
                </GeometryDrawing>
                <GeometryDrawing Brush="#FFD3D3D3">
                    <GeometryDrawing.Geometry>
                        <GeometryGroup>
                            <RectangleGeometry Rect="0,0 50,50" />
                            <RectangleGeometry Rect="50,50 50,50" />
                        </GeometryGroup>
                    </GeometryDrawing.Geometry>
                </GeometryDrawing>
            </DrawingGroup>
        </DrawingBrush.Drawing>
    </DrawingBrush>

    <Style TargetType="{x:Type xctk:ColorCanvas}">
        <Setter Property="Control.Background" Value="{StaticResource PanelBackgroundBrush}" />
        <Setter Property="Control.BorderThickness" Value="1" />
        <Setter Property="Control.Template">
            <Setter.Value>
            <ControlTemplate TargetType="{x:Type xctk:ColorCanvas}">
                <Border Background="{TemplateBinding Control.Background}" BorderThickness="{TemplateBinding Control.BorderThickness}" BorderBrush="{TemplateBinding Control.BorderBrush}" Padding="3">
                    <Grid Margin="2">
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition Height="Auto" />
                        </Grid.RowDefinitions>
                        <Grid>
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="200" />
                                <ColumnDefinition Width="Auto" />
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition Height="Auto" />
                                <RowDefinition Height="Auto" />
                            </Grid.RowDefinitions>
                            <Border BorderThickness="1" BorderBrush="#FFA9A9A9" ClipToBounds="True" Background="{StaticResource CheckerBrush}">
                                <Canvas Name="PART_ColorShadingCanvas" Width="200" Height="100" HorizontalAlignment="Left" VerticalAlignment="Top">
                                    <Rectangle Name="ColorShadingRectangle" Height="{Binding ElementName=PART_ColorShadingCanvas, Path=Height}" Width="{Binding ElementName=PART_ColorShadingCanvas, Path=Width}" Fill="{Binding SelectedColor, ElementName=PART_SpectrumSlider, Converter={StaticResource ColorToSolidColorBrushConverter}}" />
                                    <Rectangle Name="WhiteGradient" Width="{Binding ElementName=PART_ColorShadingCanvas, Path=Width}" Height="{Binding ElementName=PART_ColorShadingCanvas, Path=Height}">
                                        <Rectangle.Fill>
                                            <LinearGradientBrush StartPoint="0,0" EndPoint="1,0">
                                                <GradientStop Offset="0" Color="#ffffffff" />
                                                <GradientStop Offset="1" Color="Transparent" />
                                            </LinearGradientBrush>
                                        </Rectangle.Fill>
                                    </Rectangle>
                                    <Rectangle Name="BlackGradient" Width="{Binding ElementName=PART_ColorShadingCanvas, Path=Width}" Height="{Binding ElementName=PART_ColorShadingCanvas, Path=Height}">
                                        <Rectangle.Fill>
                                            <LinearGradientBrush StartPoint="0,1" EndPoint="0, 0">
                                                <GradientStop Offset="0" Color="#ff000000" />
                                                <GradientStop Offset="1" Color="#00000000" />
                                            </LinearGradientBrush>
                                        </Rectangle.Fill>
                                    </Rectangle>
                                    <Canvas Name="PART_ColorShadeSelector" Width="10" Height="10" IsHitTestVisible="False">
                                        <Ellipse Width="10" Height="10" StrokeThickness="3" Stroke="#FFFFFFFF" IsHitTestVisible="False" />
                                        <Ellipse Width="10" Height="10" StrokeThickness="1" Stroke="#FF000000" IsHitTestVisible="False" />
                                    </Canvas>
                                </Canvas>
                            </Border>
                            <Border Grid.Row="1" Margin="0,5,0,0">
                                <Grid>
                                    <Grid.ColumnDefinitions>
                                        <ColumnDefinition Width="*" />
                                        <ColumnDefinition Width="*" />
                                    </Grid.ColumnDefinitions>
                                    <Border Name="SelectedColorBorder" Background="{StaticResource CheckerBrush}" Height="22" Margin="2,0,2,0" BorderThickness="1" BorderBrush="#FFC9CACA">
                                        <Rectangle Name="SelectedColor" Fill="{Binding SelectedColor, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource ColorToSolidColorBrushConverter}}" />
                                    </Border>
                                    <TextBox Name="PART_HexadecimalTextBox" Grid.Column="1" Margin="2,0,2,0" VerticalAlignment="Center" Foreground="{StaticResource ButtonForeground}" />
                                </Grid>
                            </Border>
                            <Border Grid.Column="1" Grid.RowSpan="2" Margin="4,-8,0,0" ClipToBounds="False">
                                <xctk:ColorSpectrumSlider x:Name="PART_SpectrumSlider" VerticalAlignment="Stretch" />
                            </Border>
                        </Grid>
                        <Border Name="RGBBorder" MinWidth="180" Grid.Row="1" BorderThickness="1" ClipToBounds="True" Margin="0,10,0,0">
                            <Grid>
                                <Grid.RowDefinitions>
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition Height="Auto" />
                                    <RowDefinition Height="Auto" />
                                </Grid.RowDefinitions>
                                <Grid.ColumnDefinitions>
                                    <ColumnDefinition Width="Auto" />
                                    <ColumnDefinition Width="*" />
                                    <ColumnDefinition Width="Auto" />
                                </Grid.ColumnDefinitions>
                                <TextBlock Grid.Row="0" Grid.Column="0" Text="R" VerticalAlignment="Center" />
                                <Slider Name="PART_RSlider" Maximum="255" SmallChange="1" LargeChange="10" TickFrequency="1" Grid.Row="0" Grid.Column="1" Margin="4,6,4,6" VerticalAlignment="Center" Value="{Binding R, RelativeSource={RelativeSource TemplatedParent}}" />
                                <TextBox Grid.Row="0" Grid.Column="2" VerticalAlignment="Center" Foreground="{StaticResource ButtonForeground}" Text="{Binding Value, ElementName=PART_RSlider}" />
                                <TextBlock Grid.Row="1" Grid.Column="0" Text="G" VerticalAlignment="Center" />
                                <Slider Name="PART_GSlider" Maximum="255" SmallChange="1" LargeChange="10" TickFrequency="1" Grid.Row="1" Grid.Column="1" Margin="4,6,4,6" VerticalAlignment="Center" Value="{Binding G, RelativeSource={RelativeSource TemplatedParent}}" />
                                <TextBox Grid.Row="1" Grid.Column="2" VerticalAlignment="Center" Foreground="{StaticResource ButtonForeground}" Text="{Binding Value, ElementName=PART_GSlider}" />
                                <TextBlock Grid.Row="2" Grid.Column="0" Text="B" VerticalAlignment="Center" />
                                <Slider Name="PART_BSlider" Maximum="255" SmallChange="1" LargeChange="10" TickFrequency="1" Grid.Row="2" Grid.Column="1" Margin="4,6,4,6" VerticalAlignment="Center" Value="{Binding B, RelativeSource={RelativeSource TemplatedParent}}" />
                                <TextBox Grid.Row="2" Grid.Column="3" VerticalAlignment="Center" Foreground="{StaticResource ButtonForeground}" Text="{Binding Value, ElementName=PART_BSlider}" />
                                <TextBlock Grid.Row="3" Grid.Column="0" Text="A" VerticalAlignment="Center" Visibility="{Binding Path=UsingAlphaChannel, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BooleanToVisibilityConverter}}" />
                                <Slider Name="PART_OpacitySlider" Grid.Row="3" Grid.Column="1" Maximum="255" SmallChange="1" LargeChange="10" Margin="4,6,4,6" VerticalAlignment="Center" Value="{Binding Path=A, RelativeSource={RelativeSource TemplatedParent}}" Visibility="{Binding Path=UsingAlphaChannel, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BooleanToVisibilityConverter}}" />
                                <TextBox Grid.Row="3" Grid.Column="3" VerticalAlignment="Center" Foreground="{StaticResource ButtonForeground}" Text="{Binding Value, ElementName=PART_OpacitySlider}" Visibility="{Binding Path=UsingAlphaChannel, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource BooleanToVisibilityConverter}}" />
                            </Grid>
                        </Border>
                    </Grid>
                </Border>
                <ControlTemplate.Triggers>
                    <Trigger Property="UIElement.IsEnabled" Value="False">
                        <Setter Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" Property="Control.Foreground" />
                    </Trigger>
                    <Trigger Value="{x:Null}" Property="xctk:ColorCanvas.SelectedColor">
                        <Setter TargetName="PART_ColorShadeSelector" Property="UIElement.Visibility" Value="Collapsed" />
                        <Setter TargetName="SelectedColorBorder" Property="Border.Background" Value="#00FFFFFF" />
                        <Setter TargetName="RGBBorder" Property="UIElement.IsEnabled" Value="False" />
                        <Setter Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" TargetName="RGBBorder" Property="TextElement.Foreground" />
                    </Trigger>
                </ControlTemplate.Triggers>
            </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    
    <Style x:Key="{x:Type xctk:ButtonChrome}" TargetType="{x:Type xctk:ButtonChrome}">
        <Setter Property="Control.IsTabStop" Value="False" />
        <Setter Property="UIElement.SnapsToDevicePixels" Value="True" />
        <Setter Property="FrameworkElement.FocusVisualStyle" Value="{x:Null}" />
        <Setter Property="Control.BorderThickness" Value="1" />
        <Setter Property="CornerRadius" Value="3"/>
        <Setter Property="Control.Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type xctk:ButtonChrome}">
                    <Grid>
                        <Border Name="OuterBorder" BorderThickness="{TemplateBinding Control.BorderThickness}" CornerRadius="{TemplateBinding xctk:ButtonChrome.CornerRadius}" BorderBrush="{TemplateBinding Control.BorderBrush}" Background="{TemplateBinding Control.Background}"/>
                        <ContentPresenter Margin="{TemplateBinding Control.Padding}" IsEnabled="{TemplateBinding UIElement.IsEnabled}" Content="{TemplateBinding ContentControl.Content}" ContentStringFormat="{TemplateBinding ContentControl.ContentStringFormat}" ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}" ContentTemplateSelector="{TemplateBinding ContentControl.ContentTemplateSelector}" />
                    </Grid>
                    <ControlTemplate.Triggers>
                        <MultiTrigger>
                            <MultiTrigger.Conditions>
                                <Condition Property="xctk:ButtonChrome.RenderNormal" Value="False" />
                                <Condition Property="xctk:ButtonChrome.RenderChecked" Value="False" />
                            </MultiTrigger.Conditions>
                            <Setter TargetName="OuterBorder" Property="Border.BorderBrush" Value="#00FFFFFF" />
                            <Setter TargetName="OuterBorder" Property="Border.Background" Value="#00FFFFFF" />
                        </MultiTrigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type xctk:DropDownButton}">
        <Setter Property="BorderThickness" Value="1" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Background" Value="{StaticResource ButtonBackground}" />
        <Setter Property="BorderBrush" Value="{StaticResource ButtonBorder}" />
        <Setter Property="Padding" Value="3" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type xctk:DropDownButton}">
                    <Grid Name="MainGrid" SnapsToDevicePixels="True">
                        <ToggleButton Name="PART_DropDownButton" IsChecked="{Binding IsOpen, RelativeSource={RelativeSource TemplatedParent}, Mode=TwoWay}" IsHitTestVisible="{Binding IsOpen, RelativeSource={RelativeSource TemplatedParent}, Converter={StaticResource InverseBoolConverter}}">
                            <ToggleButton.Template>
                                <ControlTemplate TargetType="{x:Type ToggleButton}">
                                    <ContentPresenter />
                                </ControlTemplate>
                            </ToggleButton.Template>
                            <Grid>
                                <xctk:ButtonChrome x:Name="ToggleButtonChrome" Background="{TemplateBinding Control.Background}" Foreground="{TemplateBinding Control.Foreground}" BorderThickness="{TemplateBinding Control.BorderThickness}" BorderBrush="{TemplateBinding Control.BorderBrush}" RenderChecked="{TemplateBinding xctk:DropDownButton.IsOpen}" RenderEnabled="{TemplateBinding UIElement.IsEnabled}" RenderMouseOver="{Binding IsMouseOver, ElementName=PART_DropDownButton}" RenderPressed="{Binding IsPressed, ElementName=PART_DropDownButton}">
                                    <Grid>
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="*" />
                                            <ColumnDefinition Width="Auto" />
                                        </Grid.ColumnDefinitions>
                                        <ContentPresenter Margin="{TemplateBinding Control.Padding}" Content="{TemplateBinding ContentControl.Content}" ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}" VerticalAlignment="{TemplateBinding Control.VerticalContentAlignment}" HorizontalAlignment="{TemplateBinding Control.HorizontalContentAlignment}" RecognizesAccessKey="True" />
                                        <Grid Name="arrowGlyph" IsHitTestVisible="False" Margin="4,3,4,3" Grid.Column="1">
                                            <Path Name="Arrow" Width="7" Height="4" Data="M0,1C0,1 0,0 0,0 0,0 3,0 3,0 3,0 3,1 3,1 3,1 4,1 4,1 4,1 4,0 4,0 4,0 7,0 7,0 7,0 7,1 7,1 7,1 6,1 6,1 6,1 6,2 6,2 6,2 5,2 5,2 5,2 5,3 5,3 5,3 4,3 4,3 4,3 4,4 4,4 4,4 3,4 3,4 3,4 3,3 3,3 3,3 2,3 2,3 2,3 2,2 2,2 2,2 1,2 1,2 1,2 1,1 1,1 1,1 0,1 0,1z" Fill="{DynamicResource {x:Static SystemColors.ControlTextBrushKey}}" />
                                        </Grid>
                                    </Grid>
                                </xctk:ButtonChrome>
                            </Grid>
                        </ToggleButton>
                        <Popup Name="PART_Popup" HorizontalOffset="1" VerticalOffset="1" AllowsTransparency="True" StaysOpen="False" Placement="Bottom" Focusable="False" IsOpen="{Binding IsChecked, ElementName=PART_DropDownButton}">
                            <Border BorderThickness="1" Background="{StaticResource PanelBackgroundBrush}" BorderBrush="{StaticResource PopupDarkBorderBrush}">
                                <ContentPresenter Name="PART_ContentPresenter" Content="{TemplateBinding local:DropDownButton.DropDownContent}" />
                            </Border>
                        </Popup>
                    </Grid>
                    <ControlTemplate.Triggers>
                        <Trigger Property="UIElement.IsEnabled" Value="False">
                            <Setter TargetName="Arrow" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" Property="Shape.Fill" />
                            <Setter TargetName="ToggleButtonChrome" Value="{DynamicResource {x:Static SystemColors.GrayTextBrushKey}}" Property="Control.Foreground" />
                            <Setter TargetName="ToggleButtonChrome" Property="Foreground" Value="{StaticResource DisabledButtonForeground}"/>
                            <Setter TargetName="ToggleButtonChrome" Property="Background" Value="{StaticResource DisabledButtonBackground}"/>
                        </Trigger>
                        <Trigger Property="UIElement.IsMouseOver" Value="true">
                            <Setter TargetName="ToggleButtonChrome" Property="Background" Value="{StaticResource MouseOverButtonBackground}"/>
                            <Setter TargetName="ToggleButtonChrome" Property="Foreground" Value="{StaticResource MouseOverButtonForeground}"/>
                        </Trigger>
                        <Trigger Property="Button.IsPressed" Value="true">
                            <Setter TargetName="ToggleButtonChrome" Property="Background" Value="{StaticResource PressedButtonBackground}"/>
                            <Setter TargetName="ToggleButtonChrome" Property="Foreground" Value="{StaticResource ButtonForeground}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!-- =============================================================================== -->
    <!-- DecimalUpDown                                                                   -->
    <!-- =============================================================================== -->
    <Style TargetType="{x:Type local:DecimalUpDown}" BasedOn="{StaticResource NumericUpDown}" />

    <!-- =============================================================================== -->
    <!-- DoubleUpDown                                                                    -->
    <!-- =============================================================================== -->
    <Style TargetType="{x:Type local:DoubleUpDown}" BasedOn="{StaticResource NumericUpDown}" />

    <!-- =============================================================================== -->
    <!-- IntegerUpDown                                                                   -->
    <!-- =============================================================================== -->
    <Style TargetType="{x:Type local:IntegerUpDown}" BasedOn="{StaticResource NumericUpDown}" />

    <!-- =============================================================================== -->
    <!-- ShortUpDown                                                                     -->
    <!-- =============================================================================== -->
    <Style TargetType="{x:Type local:ShortUpDown}" BasedOn="{StaticResource NumericUpDown}" />

    <!-- =============================================================================== -->
    <!-- LongUpDown                                                                      -->
    <!-- =============================================================================== -->
    <Style TargetType="{x:Type local:LongUpDown}" BasedOn="{StaticResource NumericUpDown}" />

    <!-- =============================================================================== -->
    <!-- ByteUpDown                                                                      -->
    <!-- =============================================================================== -->
    <Style TargetType="{x:Type local:ByteUpDown}" BasedOn="{StaticResource NumericUpDown}" />

    <!-- =============================================================================== -->
    <!-- SingleUpDown                                                                    -->
    <!-- =============================================================================== -->
    <Style TargetType="{x:Type local:SingleUpDown}" BasedOn="{StaticResource NumericUpDown}" />

    <!-- =============================================================================== -->
    <!-- Style for all internal derived types of NumericUpDown must have a               -->
    <!-- ComponentResourceKey key to allow external theme to redefine the default style  -->
    <!-- (ex. Office2007 theme)                                                          -->
    <!-- =============================================================================== -->

    <!-- =============================================================================== -->
    <!-- SByteUpDown                                                                     -->
    <!-- =============================================================================== -->
    <Style x:Key="{ComponentResourceKey 
                  TypeInTargetAssembly={x:Type prim:InputBase}, 
                  ResourceId=SByteUpDown}" 
          TargetType="{x:Type prim:InputBase}" BasedOn="{StaticResource NumericUpDown}" />

    <!-- =============================================================================== -->
    <!-- UIntegerUpDown                                                                  -->
    <!-- =============================================================================== -->
    <Style x:Key="{ComponentResourceKey 
                  TypeInTargetAssembly={x:Type prim:InputBase}, 
                  ResourceId=UIntegerUpDown}" 
          TargetType="{x:Type prim:InputBase}" BasedOn="{StaticResource NumericUpDown}" />

    <!-- =============================================================================== -->
    <!-- ULongUpDown                                                                     -->
    <!-- =============================================================================== -->
    <Style x:Key="{ComponentResourceKey 
                  TypeInTargetAssembly={x:Type prim:InputBase}, 
                  ResourceId=ULongUpDown}" 
          TargetType="{x:Type prim:InputBase}" BasedOn="{StaticResource NumericUpDown}" />

    <!-- =============================================================================== -->
    <!-- UShortUpDown                                                                    -->
    <!-- =============================================================================== -->
    <Style x:Key="{ComponentResourceKey 
                  TypeInTargetAssembly={x:Type prim:InputBase}, 
                  ResourceId=UShortUpDown}" 
          TargetType="{x:Type prim:InputBase}" BasedOn="{StaticResource NumericUpDown}" />

    <Style x:Key="DarkButtonStyle"  TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource ButtonFocusVisual}"/>
        <Setter Property="Background" Value="{StaticResource ButtonBackground}"/>
        <Setter Property="BorderBrush" Value="{StaticResource ButtonBorder}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Foreground" Value="{StaticResource ButtonForeground}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border 
						Background="{TemplateBinding Background}" 
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}"
						CornerRadius="3">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
							Margin="{TemplateBinding Padding}" 
							RecognizesAccessKey="True" 
							SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
							VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" Value="{StaticResource MouseOverButtonBackground}"/>
                            <Setter Property="Foreground" Value="{StaticResource MouseOverButtonForeground}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" Value="{StaticResource PressedButtonBackground}"/>
                            <Setter Property="Foreground" Value="{StaticResource ButtonForeground}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{StaticResource DisabledButtonForeground}"/>
                            <Setter Property="Background" Value="{StaticResource DisabledButtonBackground}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style x:Key="MyCloseButtonStyle" TargetType="Button">
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="Button">
                    <Grid>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="CommonStates">
                                <VisualState x:Name="Normal"/>
                                <VisualState x:Name="MouseOver">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Duration="00:00:00.0010000" Storyboard.TargetName="Background" Storyboard.TargetProperty="(Border.Background)">
                                            <DiscreteObjectKeyFrame KeyTime="00:00:00" Value="{StaticResource MouseOverButtonBackground}"></DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="Pressed">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames BeginTime="00:00:00" Duration="00:00:00.0010000" Storyboard.TargetName="Background" Storyboard.TargetProperty="(Border.Background)">
                                            <DiscreteObjectKeyFrame KeyTime="00:00:00" Value="{StaticResource PressedButtonBackground}"></DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>
                        <Border x:Name="Background" CornerRadius="0,0,2,0" Background="{StaticResource ButtonBackground}">
                            <Border Margin="1,0,1,1" BorderBrush="#59FFFFFF" BorderThickness="1" CornerRadius="0,0,1,0"/>
                        </Border>
                        <ContentPresenter x:Name="contentPresenter" HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}" Margin="{TemplateBinding Padding}" VerticalAlignment="{TemplateBinding VerticalContentAlignment}" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}"/>
                        <Path x:Name="path" Fill="White" Margin="0,0,0,1" Visibility="Collapsed"
	                            Height="6"
		                        Width="7"
		                        Stretch="Fill"
		                        Opacity="1"
		                        Data="M 2,6 C2,6 3,6 3,6 3,6 3,5 3,5 3,5 4,5 4,5 4,5 4,6 4,6 4,6 5,6 5,6 5,6 7,6 7,6 7,6 7,5 7,5 7,5 6,5 6,5 6,5 6,4 6,4 6,4 5,4 5,4 5,4 5,2 5,2 5,2 6,2 6,2 6,2 6,1 6,1 6,1 7,1 7,1 7,1 7,0 7,0 7,0 5,0 5,0 5,0 4,0 4,0 4,0 4,1 4,1 4,1 3,1 3,1 3,1 3,0 3,0 3,0 2,0 2,0 2,0 0,0 0,0 0,0 0,1 0,1 0,1 1,1 1,1 1,1 1,2 1,2 1,2 2,2 2,2 2,2 2,4 2,4 2,4 1,4 1,4 1,4 1,5 1,5 1,5 0,5 0,5 0,5 0,6 0,6 0,6 2,6 2,6 z"/>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <Style TargetType="{x:Type Button}">
        <Setter Property="FocusVisualStyle" Value="{StaticResource ButtonFocusVisual}"/>
        <Setter Property="Background" Value="{StaticResource ButtonBackground}"/>
        <Setter Property="BorderBrush" Value="{StaticResource ButtonBorder}"/>
        <Setter Property="BorderThickness" Value="1"/>
        <Setter Property="Foreground" Value="{StaticResource ButtonForeground}"/>
        <Setter Property="HorizontalContentAlignment" Value="Center"/>
        <Setter Property="VerticalContentAlignment" Value="Center"/>
        <Setter Property="Padding" Value="1"/>
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border 
						Background="{TemplateBinding Background}" 
						BorderBrush="{TemplateBinding BorderBrush}"
						BorderThickness="{TemplateBinding BorderThickness}"
						CornerRadius="3">
                        <ContentPresenter HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
							Margin="{TemplateBinding Padding}" 
							RecognizesAccessKey="True" 
							SnapsToDevicePixels="{TemplateBinding SnapsToDevicePixels}" 
							VerticalAlignment="{TemplateBinding VerticalContentAlignment}"/>
                    </Border>
                    <ControlTemplate.Triggers>
                        <Trigger Property="IsMouseOver" Value="true">
                            <Setter Property="Background" Value="{StaticResource MouseOverButtonBackground}"/>
                            <Setter Property="Foreground" Value="{StaticResource MouseOverButtonForeground}"/>
                        </Trigger>
                        <Trigger Property="IsPressed" Value="true">
                            <Setter Property="Background" Value="{StaticResource PressedButtonBackground}"/>
                            <Setter Property="Foreground" Value="{StaticResource ButtonForeground}"/>
                        </Trigger>
                        <Trigger Property="IsEnabled" Value="false">
                            <Setter Property="Foreground" Value="{StaticResource DisabledButtonForeground}"/>
                            <Setter Property="Background" Value="{StaticResource DisabledButtonBackground}"/>
                        </Trigger>
                    </ControlTemplate.Triggers>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <xctk:WindowContentBorderMarginConverter x:Key="WindowContentBorderMarginConverter" />
    <xctk:WindowControlBackgroundConverter x:Key="WindowControlBackgroundConverter" />
    <BooleanToVisibilityConverter x:Key="booleanToVisibilityConverter"/>

    <xctk:CenterTitleConverter x:Key="CenterTitleConverter" />

    <ControlTemplate x:Key="WindowControlTemplate" TargetType="{x:Type prim:WindowControl}">
        <Grid>
            <Border x:Name="PART_WindowRoot"
                          BorderThickness="{TemplateBinding WindowBorderThickness}"
                          BorderBrush="{TemplateBinding WindowBorderBrush}"
                          CornerRadius="2,2,0,0"
                          Width="{TemplateBinding Width}"
                          Height="{TemplateBinding Height}">
                <Border.Background>
                    <MultiBinding Converter="{StaticResource WindowControlBackgroundConverter}">
                        <Binding Path="WindowBackground" RelativeSource="{RelativeSource TemplatedParent}" />
                        <Binding Path="WindowOpacity" RelativeSource="{RelativeSource TemplatedParent}" />
                    </MultiBinding>
                </Border.Background>
                <Border x:Name="WindowRootInnerBorder" BorderThickness="0" BorderBrush="White" CornerRadius="2,2,0,0">
                    <Grid>
                        <Grid.RowDefinitions>
                            <RowDefinition Height="Auto" />
                            <RowDefinition />
                        </Grid.RowDefinitions>

                        <!-- Header Grid-->
                        <Border Grid.Row="0" BorderBrush="DodgerBlue" Opacity="0.5" BorderThickness="0,0,0,1"></Border>
                        <Grid x:Name="PART_HeaderGrid">
                            <Grid.ColumnDefinitions>
                                <ColumnDefinition Width="{Binding WindowThickness.Left, RelativeSource={RelativeSource TemplatedParent}}"/>
                                <ColumnDefinition Width="Auto" />
                                <ColumnDefinition Width="*" />
                                <ColumnDefinition x:Name="HeaderButtonsColumn" Width="Auto"/>
                            </Grid.ColumnDefinitions>
                            <Grid.RowDefinitions>
                                <RowDefinition x:Name="HeaderRow" Height="26" />
                                <RowDefinition Height="{Binding WindowThickness.Top, RelativeSource={RelativeSource TemplatedParent}}" />
                            </Grid.RowDefinitions>

                            <!-- Icon and Title -->
                            <Image x:Name="PART_Icon"
                                Grid.Row="0"
                                Grid.RowSpan="2"
                                Grid.Column="1"
                                VerticalAlignment="Center"
                                Source="{TemplateBinding CaptionIcon}"
                                MaxWidth="15"
                                MaxHeight="15"
                                Margin="0,2,0,2">
                            </Image>
                            <Grid x:Name="Title"
                                 Grid.Column="2"
                                 Grid.Row="0"
                                 Grid.RowSpan="2">
                                <!-- Rectangle behind title to display a glow effect on title -->
                                <!--<Rectangle Width="{Binding ElementName=TitleGrid, Path=ActualWidth}" 
                                          Height="{Binding ElementName=TitleGrid, Path=ActualHeight}" 
                                          HorizontalAlignment="{Binding ElementName=TitleGrid, Path=HorizontalAlignment}" 
                                          VerticalAlignment="{Binding ElementName=TitleGrid, Path=VerticalAlignment}"
                                          Fill="{TemplateBinding CaptionShadowBrush}">
                                    <Rectangle.Effect>
                                        <BlurEffect Radius="10" />
                                    </Rectangle.Effect>
                                </Rectangle>-->
                                <Grid x:Name="TitleGrid"
                                    HorizontalAlignment="Left"
                                    VerticalAlignment="Center">
                                    <TextBlock x:Name="TitleText"
                                            Text="{TemplateBinding Caption}"
                                            Foreground="{TemplateBinding CaptionForeground}"
                                            TextTrimming="CharacterEllipsis"
                                            Margin="5,4,5,4" />
                                </Grid>
                            </Grid>

                            <!-- Close-Maximize-Minimize Buttons -->
                            <StackPanel x:Name="ButtonsPanel" 
                                    Grid.Row="0"
                                    Grid.RowSpan="2"
                                    Grid.Column="3"
                                    Orientation="Horizontal" VerticalAlignment="Top" HorizontalAlignment="Right">
                                <StackPanel.Margin>
                                    <MultiBinding Converter="{StaticResource WindowContentBorderMarginConverter}" ConverterParameter="2">
                                        <Binding Path="WindowThickness.Right" RelativeSource="{RelativeSource TemplatedParent}" />
                                        <Binding Path="WindowThickness.Right" RelativeSource="{RelativeSource TemplatedParent}" />
                                        <!-- not used -->
                                    </MultiBinding>
                                </StackPanel.Margin>
                                <!--close button-->
                                <Button x:Name="PART_CloseButton"
                                    Style="{TemplateBinding CloseButtonStyle}" 
                                    Visibility="Collapsed"/>
                                    <!--Visibility="{TemplateBinding CloseButtonVisibility}" />-->
                                    
                            </StackPanel>

                            <!-- ToolWindow Close Button -->
                            <Border x:Name="ToolWindowBorder"
                                Grid.Row="0"
                                 Grid.RowSpan="2"
                                 Grid.Column="3"
                                VerticalAlignment="Top"
                                Visibility="Collapsed"
                                HorizontalAlignment="Right">
                                <Border.Margin>
                                    <MultiBinding Converter="{StaticResource WindowContentBorderMarginConverter}" ConverterParameter="2">
                                        <Binding Path="WindowThickness.Right" RelativeSource="{RelativeSource TemplatedParent}" />
                                        <Binding Path="WindowThickness.Right" RelativeSource="{RelativeSource TemplatedParent}" />
                                        <!-- not used -->
                                    </MultiBinding>
                                </Border.Margin>
                                <Button x:Name="PART_ToolWindowCloseButton"
                                    Margin="0,3,0,1"
                                    Style="{TemplateBinding CloseButtonStyle}" >
                                </Button>
                            </Border>

                            <!-- Header Drag Thumb -->
                            <Thumb x:Name="PART_HeaderThumb" 
                                Grid.Row="0"
                                Grid.RowSpan="2"
                                Grid.Column="2"
                                Opacity="0"
                                IsTabStop="False"/>
                        </Grid>

                        <!-- Content Border -->
                        <Border x:Name="ContentOuterBorder" Grid.Row="1" BorderBrush="DodgerBlue" BorderThickness="0,0,0,0">
                            <Border.Margin>
                                <MultiBinding Converter="{StaticResource WindowContentBorderMarginConverter}" ConverterParameter="0">
                                    <Binding Path="WindowThickness.Left" RelativeSource="{RelativeSource TemplatedParent}" />
                                    <Binding Path="WindowThickness.Bottom" RelativeSource="{RelativeSource TemplatedParent}" />
                                </MultiBinding>
                            </Border.Margin>
                            <Border x:Name="ContentBorder" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="{TemplateBinding BorderThickness}" >
                                <Border x:Name="ContentInnerBorder" BorderBrush="#FFF2F2F2" BorderThickness="0">
                                    <!-- only visible for ToolWindow -->
                                    <ContentPresenter x:Name="Content" Content="{TemplateBinding Content}" ContentTemplate="{TemplateBinding ContentTemplate}" />
                                </Border>
                            </Border>
                        </Border>

                    </Grid>
                </Border>
            </Border>

            <!-- Special Border to prevent all mouse inputs when this WindowControl is behind a modal window -->
            <Border x:Name="PART_BlockMouseInputsBorder" Background="Transparent" Visibility="Collapsed"/>
        </Grid>
        <ControlTemplate.Triggers>

            <Trigger Property="WindowStyle" Value="None">
                <Setter Property="Height" Value="0" TargetName="HeaderRow" />
                <Setter Property="Visibility" Value="Collapsed" TargetName="PART_Icon" />
                <Setter Property="Visibility" Value="Collapsed" TargetName="Title" />
                <Setter Property="Visibility" Value="Collapsed" TargetName="PART_HeaderThumb" />
                <Setter Property="Visibility" Value="Collapsed" TargetName="ButtonsPanel" />
                <Setter Property="Height" Value="0" TargetName="HeaderRow" />
            </Trigger>



            <Trigger Property="WindowStyle" Value="ToolWindow">
                <Setter Property="Height" Value="Auto" TargetName="HeaderRow" />
                <Setter Property="Visibility" Value="Collapsed" TargetName="PART_Icon" />
                <Setter Property="Visibility" Value="Collapsed" TargetName="ButtonsPanel" />
                <Setter Property="Visibility" Value="Visible" TargetName="ToolWindowBorder" />
                <Setter Property="CornerRadius" Value="0" TargetName="PART_WindowRoot" />
                <Setter Property="CornerRadius" Value="0" TargetName="WindowRootInnerBorder" />
                <Setter Property="BorderBrush" Value="White" TargetName="ContentOuterBorder" />
                <Setter Property="BorderBrush" Value="Black" TargetName="ContentBorder" />
                <Setter Property="BorderThickness" Value="1" TargetName="ContentInnerBorder" />
            </Trigger>

            <Trigger Property="IsActive" Value="False">
                <Setter Property="Background" Value="{Binding WindowInactiveBackground, RelativeSource={RelativeSource TemplatedParent}}" TargetName="PART_WindowRoot" />
                <Setter Property="BorderBrush" Value="#FF666666" TargetName="PART_WindowRoot" />
                <Setter Property="BorderBrush" Value="#FF7B7B7B" TargetName="ContentBorder" />
                <Setter Property="IsEnabled" Value="False" TargetName="Content" />
            </Trigger>

            <Trigger Property="IsKeyboardFocusWithin" Value="True">
                <Setter Property="KeyboardNavigation.TabNavigation" Value="Cycle" />
            </Trigger>

            <!-- #TODODOC-->
            <!--Remove the Margin when no title to remove the TitleShadow glow effect.-->
            <Trigger Property="Text" Value="" SourceName="TitleText">
                <Setter Property="Margin" Value="0" TargetName="TitleText" />
            </Trigger>

            <Trigger Property="Text" Value="{x:Null}" SourceName="TitleText">
                <Setter Property="Margin" Value="0" TargetName="TitleText" />
            </Trigger>

            <!-- Center the Window Title on the entire window -->
            <DataTrigger Value="1">
                <DataTrigger.Binding>
                    <MultiBinding Converter="{StaticResource CenterTitleConverter}">
                        <Binding ElementName="TitleText" Path="DesiredSize" />
                        <Binding ElementName="PART_HeaderGrid" Path="ActualWidth" />
                        <Binding ElementName="PART_HeaderGrid" Path="ColumnDefinitions" />
                    </MultiBinding>
                </DataTrigger.Binding>
                <Setter TargetName="Title" Property="Column" Value="0" />
                <Setter TargetName="Title" Property="ColumnSpan" Value="4" />
                <Setter TargetName="TitleGrid" Property="HorizontalAlignment" Value="Center" />
            </DataTrigger>

            <!-- Center the Window Title in it's own column -->
            <DataTrigger Value="2">
                <DataTrigger.Binding>
                    <MultiBinding Converter="{StaticResource CenterTitleConverter}">
                        <Binding ElementName="TitleText" Path="DesiredSize" />
                        <Binding ElementName="PART_HeaderGrid" Path="ActualWidth" />
                        <Binding ElementName="PART_HeaderGrid" Path="ColumnDefinitions" />
                    </MultiBinding>
                </DataTrigger.Binding>
                <Setter TargetName="TitleGrid" Property="HorizontalAlignment" Value="Center" />
            </DataTrigger>

        </ControlTemplate.Triggers>
    </ControlTemplate>

    <Style x:Key="MyPrimWindowStyle" TargetType="{x:Type prim:WindowControl}" >
        <Setter Property="CloseButtonStyle" Value="{StaticResource {ComponentResourceKey 
                  TypeInTargetAssembly={x:Type prim:WindowControl}, 
                  ResourceId=DefaultCloseButtonStyle}}" />
        <Setter Property="IsTabStop" Value="False" />
        <Setter Property="KeyboardNavigation.TabNavigation" Value="None" />
        <Setter Property="Template" Value="{StaticResource WindowControlTemplate}" />
    </Style>

    <Style TargetType="{x:Type local:MessageBox}" BasedOn="{StaticResource MyPrimWindowStyle}">
        <Setter Property="ButtonRegionBackground" Value="{StaticResource WindowBackgroundBrush}"/>
        <Setter Property="Focusable" Value="False" />
        <Setter Property="MinWidth" Value="350" />
        <Setter Property="MinHeight" Value="50" />
        <Setter Property="MaxHeight" Value="250" />
        <Setter Property="WindowInactiveBackground" Value="{StaticResource WindowBackgroundBrush}"/>
        <Setter Property="CaptionForeground" Value="{StaticResource ForegroundBrush}" />
        <Setter Property="Background" Value="{StaticResource WindowBackgroundBrush}" />
        <Setter Property="BorderThickness" Value="0"/>
        <Setter Property="WindowBackground" Value="{StaticResource ScrollViewerBackground}" />
        <Setter Property="WindowBorderBrush" Value="Black" />
        <Setter Property="WindowBorderThickness" Value="1" />
        <Setter Property="WindowOpacity" Value="1" />
        
        <Setter Property="CaptionShadowBrush" Value="{StaticResource WindowBackgroundBrush}"></Setter>
        <Setter Property="OkButtonStyle" Value="{StaticResource DarkButtonStyle}"></Setter>
        <Setter Property="CancelButtonStyle" Value="{StaticResource DarkButtonStyle}"></Setter>
        <Setter Property="NoButtonStyle" Value="{StaticResource DarkButtonStyle}"></Setter>
        <Setter Property="YesButtonStyle" Value="{StaticResource DarkButtonStyle}"></Setter>
        
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type local:MessageBox}">
                    <Grid>
                        <VisualStateManager.VisualStateGroups>
                            <VisualStateGroup x:Name="group1">
                                <VisualState x:Name="OK">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_OkButton" Storyboard.TargetProperty="Visibility">
                                            <DiscreteObjectKeyFrame KeyTime="0">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Visible</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="OKCancel">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_OkButton" Storyboard.TargetProperty="Visibility">
                                            <DiscreteObjectKeyFrame KeyTime="0">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Visible</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_CancelButton" Storyboard.TargetProperty="Visibility">
                                            <DiscreteObjectKeyFrame KeyTime="0">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Visible</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="YesNo">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_YesButton" Storyboard.TargetProperty="Visibility">
                                            <DiscreteObjectKeyFrame KeyTime="0">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Visible</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_NoButton" Storyboard.TargetProperty="Visibility">
                                            <DiscreteObjectKeyFrame KeyTime="0">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Visible</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                                <VisualState x:Name="YesNoCancel">
                                    <Storyboard>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_YesButton" Storyboard.TargetProperty="Visibility">
                                            <DiscreteObjectKeyFrame KeyTime="0">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Visible</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_NoButton" Storyboard.TargetProperty="Visibility">
                                            <DiscreteObjectKeyFrame KeyTime="0">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Visible</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                        <ObjectAnimationUsingKeyFrames Storyboard.TargetName="PART_CancelButton" Storyboard.TargetProperty="Visibility">
                                            <DiscreteObjectKeyFrame KeyTime="0">
                                                <DiscreteObjectKeyFrame.Value>
                                                    <Visibility>Visible</Visibility>
                                                </DiscreteObjectKeyFrame.Value>
                                            </DiscreteObjectKeyFrame>
                                        </ObjectAnimationUsingKeyFrames>
                                    </Storyboard>
                                </VisualState>
                            </VisualStateGroup>
                        </VisualStateManager.VisualStateGroups>

                        <prim:WindowControl x:Name="PART_WindowControl"
                                    Caption="{TemplateBinding Caption}" 
                                    CaptionForeground="{TemplateBinding CaptionForeground}"
                                    CaptionShadowBrush="{TemplateBinding CaptionShadowBrush}"
                                    CaptionIcon="{TemplateBinding CaptionIcon}"
                                    Background="{TemplateBinding Background}"
                                    BorderBrush="{TemplateBinding BorderBrush}"
                                    BorderThickness="{TemplateBinding BorderThickness}"
                                    IsActive="{TemplateBinding IsActive}"
                                    WindowBackground="{TemplateBinding WindowBackground}"
                                    WindowInactiveBackground="{TemplateBinding WindowInactiveBackground}" 
                                    WindowBorderBrush="{TemplateBinding WindowBorderBrush}"
                                    WindowBorderThickness="{TemplateBinding WindowBorderThickness}"
                                    CloseButtonStyle="{TemplateBinding CloseButtonStyle}"
                                    WindowOpacity="{TemplateBinding WindowOpacity}"
                                            Style="{StaticResource MyPrimWindowStyle}">
                            <prim:WindowControl.Content>
                                <Grid MinWidth="300">
                                    <Grid.RowDefinitions>
                                        <RowDefinition />
                                        <RowDefinition Height="Auto" />
                                    </Grid.RowDefinitions>

                                    <Grid Margin="24,16,24,22">
                                        <Grid.ColumnDefinitions>
                                            <ColumnDefinition Width="Auto" />
                                            <ColumnDefinition Width="*" />
                                        </Grid.ColumnDefinitions>

                                        <!-- Message Image -->
                                        <!--<Image x:Name="MessageBoxImage" 
                                       VerticalAlignment="Center" 
                                       SnapsToDevicePixels="True"
                                       Width="36"
                                        Height="36"
                                       Stretch="UniformToFill"
                                       Source="{TemplateBinding ImageSource}" />-->

                                        <!-- Message Text -->
                                        <ScrollViewer Background="{TemplateBinding Background}" Grid.Column="1" VerticalScrollBarVisibility="Auto">
                                            <TextBlock x:Name="MessageText" 
                                               TextWrapping="Wrap"
                                               VerticalAlignment="Center" 
                                               MaxWidth="450" 
                                               Text="{TemplateBinding Text}" 
                                               FontFamily="{TemplateBinding FontFamily}" 
                                               FontSize="{TemplateBinding FontSize}" 
                                               FontStyle="{TemplateBinding FontStyle}" 
                                               FontWeight="{TemplateBinding FontWeight}" 
                                               Foreground="{TemplateBinding Foreground}"
                                               Margin="10,0,0,0"/>
                                        </ScrollViewer>
                                    </Grid>

                                    <!-- Buttons -->
                                    <Border Grid.Row="1" Background="{TemplateBinding ButtonRegionBackground}">
                                        <Grid HorizontalAlignment="Right" Margin="12">
                                            <Grid.ColumnDefinitions>
                                                <ColumnDefinition Width="Auto" />
                                                <ColumnDefinition Width="Auto" />
                                                <ColumnDefinition Width="Auto" />
                                                <ColumnDefinition Width="Auto" />
                                            </Grid.ColumnDefinitions>

                                            <Button Grid.Column="0" x:Name="PART_YesButton" MinWidth="65" Margin="6,0,0,0" Visibility="Collapsed" Content="{TemplateBinding YesButtonContent}" Style="{TemplateBinding YesButtonStyle}" />
                                            <Button Grid.Column="1" x:Name="PART_NoButton" MinWidth="65" Margin="6,0,0,0" Visibility="Collapsed" Content="{TemplateBinding NoButtonContent}" Style="{TemplateBinding NoButtonStyle}" />
                                            <Button Grid.Column="2" x:Name="PART_OkButton" MinWidth="65" Margin="6,0,0,0" Visibility="Collapsed" Content="{TemplateBinding OkButtonContent}" Style="{TemplateBinding OkButtonStyle}" />
                                            <Button Grid.Column="3" x:Name="PART_CancelButton" MinWidth="65" Margin="6,0,0,0" Visibility="Collapsed" Content="{TemplateBinding CancelButtonContent}" Style="{TemplateBinding CancelButtonStyle}" IsCancel="True" />
                                        </Grid>
                                    </Border>
                                </Grid>
                            </prim:WindowControl.Content>
                        </prim:WindowControl>
                    </Grid>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    

</ResourceDictionary>
